// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SupportCaseInitParameters struct {
	CategoryCode *string `json:"categoryCode,omitempty" tf:"category_code,omitempty"`

	CcEmailAddresses []*string `json:"ccEmailAddresses,omitempty" tf:"cc_email_addresses,omitempty"`

	CommunicationBody *string `json:"communicationBody,omitempty" tf:"communication_body,omitempty"`

	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	ServiceCode *string `json:"serviceCode,omitempty" tf:"service_code,omitempty"`

	SeverityCode *string `json:"severityCode,omitempty" tf:"severity_code,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SupportCaseObservation struct {
	CaseID *string `json:"caseId,omitempty" tf:"case_id,omitempty"`

	CategoryCode *string `json:"categoryCode,omitempty" tf:"category_code,omitempty"`

	CcEmailAddresses []*string `json:"ccEmailAddresses,omitempty" tf:"cc_email_addresses,omitempty"`

	CommunicationBody *string `json:"communicationBody,omitempty" tf:"communication_body,omitempty"`

	DisplayID *string `json:"displayId,omitempty" tf:"display_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	ServiceCode *string `json:"serviceCode,omitempty" tf:"service_code,omitempty"`

	SeverityCode *string `json:"severityCode,omitempty" tf:"severity_code,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SupportCaseParameters struct {

	// +kubebuilder:validation:Optional
	CategoryCode *string `json:"categoryCode,omitempty" tf:"category_code,omitempty"`

	// +kubebuilder:validation:Optional
	CcEmailAddresses []*string `json:"ccEmailAddresses,omitempty" tf:"cc_email_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	CommunicationBody *string `json:"communicationBody,omitempty" tf:"communication_body,omitempty"`

	// +kubebuilder:validation:Optional
	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceCode *string `json:"serviceCode,omitempty" tf:"service_code,omitempty"`

	// +kubebuilder:validation:Optional
	SeverityCode *string `json:"severityCode,omitempty" tf:"severity_code,omitempty"`

	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

// SupportCaseSpec defines the desired state of SupportCase
type SupportCaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SupportCaseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SupportCaseInitParameters `json:"initProvider,omitempty"`
}

// SupportCaseStatus defines the observed state of SupportCase.
type SupportCaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SupportCaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SupportCase is the Schema for the SupportCases API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SupportCase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.categoryCode) || (has(self.initProvider) && has(self.initProvider.categoryCode))",message="spec.forProvider.categoryCode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.communicationBody) || (has(self.initProvider) && has(self.initProvider.communicationBody))",message="spec.forProvider.communicationBody is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.language) || (has(self.initProvider) && has(self.initProvider.language))",message="spec.forProvider.language is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceCode) || (has(self.initProvider) && has(self.initProvider.serviceCode))",message="spec.forProvider.serviceCode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.severityCode) || (has(self.initProvider) && has(self.initProvider.severityCode))",message="spec.forProvider.severityCode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subject) || (has(self.initProvider) && has(self.initProvider.subject))",message="spec.forProvider.subject is a required parameter"
	Spec   SupportCaseSpec   `json:"spec"`
	Status SupportCaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SupportCaseList contains a list of SupportCases
type SupportCaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SupportCase `json:"items"`
}

// Repository type metadata.
var (
	SupportCase_Kind             = "SupportCase"
	SupportCase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SupportCase_Kind}.String()
	SupportCase_KindAPIVersion   = SupportCase_Kind + "." + CRDGroupVersion.String()
	SupportCase_GroupVersionKind = CRDGroupVersion.WithKind(SupportCase_Kind)
)

func init() {
	SchemeBuilder.Register(&SupportCase{}, &SupportCaseList{})
}
